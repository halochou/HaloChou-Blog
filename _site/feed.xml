<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Halo Zone</title>
<subtitle type="text"></subtitle>
<generator uri="https://github.com/mojombo/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="http://halochou.github.io/feed.xml" />
<link rel="alternate" type="text/html" href="http://halochou.github.io" />
<updated>2014-01-14T09:59:24+08:00</updated>
<id>http://halochou.github.io/</id>
<author>
  <name>Zhou Yang</name>
  <uri>http://halochou.github.io/</uri>
  <email>halo.chou@gmail.com</email>
</author>


<entry>
  <title type="html"><![CDATA[转载-MFC多线程的界面更新]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/mfc-threads" />
  <id>http://halochou.github.io/mfc-threads</id>
  <published>2014-01-14T09:47:00Z</published>
  <updated>2014-01-14T09:47:00Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;帮朋友转载&lt;/p&gt;

&lt;p&gt;转自&lt;a href=&quot;http://hi.baidu.com/edzhu/item/38be47081ac776056c9048be&quot;&gt;铮铮卡穆的空间&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;界面更新一般只能用在主线程中，在子线程中更新界面通常都会崩溃，这时可以考虑线程间通信，在子线程中发出一个消息，由主线程来接收，主线程收到消息之后，进行界面更新操作。&lt;/p&gt;

&lt;p&gt;以下部分为转载：&lt;/p&gt;

&lt;p&gt;一.在你的相关头文件中加入自定义消息常量比如一个串口读完成的消息: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#define   WM_COMM_READCOMPLETE                   WM_USER+1001 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;二.再在你的主线程要负责处理该消息的那个窗口中(比如&lt;code&gt;CFormView1&lt;/code&gt;)加入这个消息的映射: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;BEGIN_MESSAGE_MAP(CFormView1,   CFormView) 
    ON_MESSAGE(WM_COMM_READCOMPLETE,OnReadComplete) 
END_MESSAGE_MAP() 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;三.之后在窗口类&lt;code&gt;CFormView1&lt;/code&gt;中定义&lt;code&gt;OnReadComplete&lt;/code&gt;这个消息处理函数： &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class   CPortFormView   :   public   CFormView 
{ 
    public: 
    afx_msg   LONG   OnReadComplete(UINT   ,LONG   buf); 
    ...... 
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后你在&lt;code&gt;CFormView1&lt;/code&gt;的实现文件中实现&lt;code&gt;OnReadComplete&lt;/code&gt;这个函数,完成该消息的处理. &lt;/p&gt;

&lt;p&gt;四.这样你在在其它辅助线程里要向&lt;code&gt;CFormView1&lt;/code&gt;窗口发消息&lt;code&gt;WM_COMM_READCOMPLETE&lt;/code&gt;并让 
主线程去执行消息处理函数&lt;code&gt;OnReadComplete&lt;/code&gt;时，你只需要用下面两个函数之一就行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;::PostMessage(hWndFormView1,WM_COMM_READCOMPLETE,wParam,lParam); 
::SendMessage(hWndFormView1,WM_COMM_READCOMPLETE,wParam,lParam); 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;hWndFormView1&lt;/code&gt;为窗口句柄；&lt;code&gt;wParam&lt;/code&gt;,&lt;code&gt;lParam&lt;/code&gt;你可以用来传参数 &lt;/p&gt;

&lt;p&gt;五.注意使用多线程的方法要正确，避免死锁 &lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/mfc-threads&quot;&gt;转载-MFC多线程的界面更新&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 14, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[折腾Jekyll的收获]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/about-jekyll" />
  <id>http://halochou.github.io/about-jekyll</id>
  <published>2014-01-13T16:25:00Z</published>
  <updated>2014-01-13T16:25:00Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;还是忍不住又折腾了一次，花了不少时间把blog迁移到Jekyll了，不过收获还是不小的。&lt;/p&gt;

&lt;p&gt;原本用hexo挺好的，忍不住研究了一下Jekyll的目录结构，比hexo简洁许多，虽然需要自己动手的地方多些，但就当学习Web前端技术了。&lt;/p&gt;

&lt;p&gt;折腾期间按照Instapaper的风格fork出了一套主题，已传到&lt;a href=&quot;https://github.com/halochou/Instapaper-Jekyll-theme&quot;&gt;Github&lt;/a&gt;了。改得很粗糙，留着以后慢慢雕琢吧&lt;/p&gt;

&lt;p&gt;现在Blog用的主题是&lt;a href=&quot;http://mademistakes.com&quot;&gt;Minimal Mistakes&lt;/a&gt;，自己做了一些符合天朝特色的&lt;a href=&quot;https://github.com/halochou/halochou.github.com&quot;&gt;定制&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;此番对Web前端技术的认识有了不少提高，简单整理一下。&lt;/p&gt;

&lt;h1 id=&quot;bootstrap&quot;&gt;Bootstrap&lt;/h1&gt;
&lt;p&gt;Twitter工程师开发的前端框架，我理解就是一组预定好的网页组件、布局的CSS，只包含前端视觉部分，可用于任何html设计环境。&lt;/p&gt;

&lt;p&gt;基本模板：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Bootstrap 101 Template&amp;lt;/title&amp;gt;
    &amp;lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&amp;gt;
    &amp;lt;!-- Bootstrap --&amp;gt;
    &amp;lt;link href=&quot;css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot;&amp;gt;
    &amp;lt;!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries --&amp;gt;
    &amp;lt;!-- WARNING: Respond.js doesn&#39;t work if you view the page via file:// --&amp;gt;
    &amp;lt;!--[if lt IE 9]&amp;gt;
      &amp;lt;script src=&quot;https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&quot;https://oss.maxcdn.com/libs/respond.js/1.3.0/respond.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;![endif]--&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;
    &amp;lt;!-- jQuery (necessary for Bootstrap&#39;s JavaScript plugins) --&amp;gt;
    &amp;lt;script src=&quot;https://code.jquery.com/jquery.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;!-- Include all compiled plugins (below), or include individual files as needed --&amp;gt;
    &amp;lt;script src=&quot;js/bootstrap.min.js&quot;&amp;gt;&amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;模板包含最基本CSS、JS文件的导入，之后只需在body部分添加自己的网页组件即可。采用12列形式布局，如果需要对CSS进行定制，则建立自己的CSS文件，在bootstrap.css之后导入覆盖即可。&lt;/p&gt;

&lt;h1 id=&quot;css&quot;&gt;CSS&lt;/h1&gt;
&lt;p&gt;一直也没系统学习过CSS，不过通过定制Jekyll主题，倒是对CSS有了个大致了解。&lt;/p&gt;

&lt;p&gt;CSS用于统一定义网页样式，将html内容数据与样式信息分离解耦。&lt;/p&gt;

&lt;h2 id=&quot;css-1&quot;&gt;CSS基本语法：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;selector {
    declaration1; 
    declaration2; 
    ... 
    declarationN 
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;selector（选择器）是需要定制的html元素，如&lt;code&gt;h1&lt;/code&gt;，&lt;code&gt;h2&lt;/code&gt;，&lt;code&gt;p&lt;/code&gt;，&lt;code&gt;li&lt;/code&gt;等。
declaration通常是相关属性的赋值。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;派生选择器：&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;strong {
     color: red;
     }
h2 {
     color: red;
     }
h2 strong {
     color: blue;
     }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;选择器通常有不同状态，比如一段文字&amp;lt;p&amp;gt;&amp;lt;/p&amp;gt;，可能有href超链接属性，超链接又存在默认、鼠标悬停、点击等不同的状态，派生选择器通过显式声明追加新的样式定义，类似程序语言中的函数重载。&lt;/p&gt;

&lt;h2 id=&quot;id&quot;&gt;id选择器：&lt;/h2&gt;
&lt;p&gt;HTML中定义元素时，可以为特定元素添加id属性，如果此id在CSS中有定义，则该元素就按照CSS被渲染。&lt;code&gt;&amp;lt;div id=&quot;sidebar-wrap&quot;&amp;gt;&amp;lt;/div&amp;gt;&lt;/code&gt;就创建了一个侧边栏的容器。同一个HTML页面中，每个id都是唯一的，即一个实例。&lt;/p&gt;

&lt;p&gt;CSS定义id选择器的样式：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#sidebar {
    font-style: italic;
    text-align: right;
    margin-top: 0.5em;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;class&quot;&gt;class选择器：&lt;/h2&gt;
&lt;p&gt;相对于id，class指代一类元素的样式，同一页面中可以出现多次。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.sidebar-item{
    color: #f60;
    background: #666;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;less&quot;&gt;LESS&lt;/h1&gt;
&lt;p&gt;手工编写CSS冗长切不灵活，于是产生了CSS预编译语言，LESS只是其中一种，Bootstrap默认采用LESS。LESS在CSS语法的基础上添加了许多程序语言元素。
##变量&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@color: #4D926F;
#header {
  color: @color;
}
h2 {
  color: @color;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;mixins&quot;&gt;Mixins（带参函数）&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;.rounded-corners (@radius: 5px) {
  -webkit-border-radius: @radius;
  -moz-border-radius: @radius;
  -ms-border-radius: @radius;
  -o-border-radius: @radius;
  border-radius: @radius;
}
#header {
  .rounded-corners;
}
#footer {
  .rounded-corners(10px);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;嵌套&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;#header {
  h1 {
    font-size: 26px;
    font-weight: bold;
  }
  p { font-size: 12px;
    a { text-decoration: none;
      &amp;amp;:hover { border-width: 1px }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;运算&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;@the-border: 1px;
@base-color: #111;
@red:        #842210;
#header {
  color: (@base-color * 3);
  border-left: @the-border;
  border-right: (@the-border * 2);
}
#footer {
  color: (@base-color + #003300);
  border-color: desaturate(@red, 10%);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LESS可以编译生成CSS，编译器基于node.js。也可以直接在HTML中加载，但性能会有折损。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;stylesheet/less&quot; type=&quot;text/css&quot; href=&quot;styles.less&quot; /&amp;gt;
&amp;lt;script src=&quot;less.js&quot; type=&quot;text/javascript&quot;&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目前掌握的大致这些，修改一下别人的主题基本够用，有时间再详细研究。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/about-jekyll&quot;&gt;折腾Jekyll的收获&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 13, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Linux/Unix Learn Note]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/cli-note" />
  <id>http://halochou.github.io/cli-note</id>
  <published>2014-01-13T15:22:00Z</published>
  <updated>2014-01-13T15:22:00Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;This is a note which recorded *nix cli command I learnt.
It will be updated continuously.&lt;/p&gt;

&lt;h1 id=&quot;linux&quot;&gt;Linux&lt;/h1&gt;

&lt;h2 id=&quot;process&quot;&gt;Process&lt;/h2&gt;

&lt;h3 id=&quot;lsof&quot;&gt;lsof&lt;/h3&gt;

&lt;p&gt;Get which file was opened by &lt;code&gt;pid&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof -p pid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get which process opened this file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof /var/run/sendmail.pid 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get file already been deleted but still held in /proc&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof | grep deleted
cat /proc/pid/fd/dddd &amp;gt; /tmp/sample
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get process using port 80&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof -i :80
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get process communicating with 192.168.1.10&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lsof -i @192.168.1.10
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;aix&quot;&gt;AIX&lt;/h1&gt;

&lt;h2 id=&quot;process-1&quot;&gt;Process&lt;/h2&gt;

&lt;p&gt;List of process&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ps -ef  #HPUX&#39;s style.
ps aux  #AIX, Linux style.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Get pid using /usr&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fuser -c /usr  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Monitor process’s system call usage.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;strace #Linux
truss  #AIX
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;lvm&quot;&gt;LVM&lt;/h2&gt;

&lt;p&gt;Rebuild LVCB,VGDA for &lt;code&gt;somevg&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;synclvodm -v somevg
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Refresh VG info in the ODM.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;rootvg:&lt;code&gt;redefinevg rootvg&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;normal vg:&lt;code&gt;varyoffvg&lt;/code&gt;,&lt;code&gt;exportvg&lt;/code&gt;,&lt;code&gt;importvg&lt;/code&gt;,&lt;code&gt;varyonvg&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Add pvid for new disk.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chdev -l hdisk4 -a pv=yes
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Filesystem check.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fsck /mountpoint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fix superblock.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dd count=1 bs=4k skip=31 seek=1 if=/dev/lv00 of=/dev/lv00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Umount a busy device.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#fuser -x -c /home
/home:11630
#ps -fp 11630
guest 11630 14992 0 16:44:51 pts/1 0:00 -sh
# kill -1 11630
# umount /home
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;hmc&quot;&gt;HMC&lt;/h1&gt;

&lt;h2 id=&quot;dlpar-dynamic-addremove-rmc-error&quot;&gt;DLPAR dynamic add/remove RMC error&lt;/h2&gt;

&lt;p&gt;1.Restart RMC process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/sbin/rsct/bin/rmcctrl -A
/usr/sbin/rsct/bin/rmcctrl -p
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2.Refresh src.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;refresh -g rsct_rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3.Rebuild RMC database.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/sbin/rsct/install/bin/recfgct
&lt;/code&gt;&lt;/pre&gt;


  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/cli-note&quot;&gt;Linux/Unix Learn Note&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 13, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Linux-and-me]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/linux-and-me" />
  <id>http://halochou.github.io/linux-and-me</id>
  <published>2014-01-08T12:43:45Z</published>
  <updated>2014-01-08T12:43:45Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;没记错的话，大约就是2000年第一次接触Linux，当时看到杂志上说Linux能在很古老的硬件上运行，而且Titanic就是用这东西渲染的。&lt;/p&gt;

&lt;p&gt;是的，这就是当时我对Linux的全部了解。
于是就冲到盗版盘市场买了张RedHat 6.2（不是现在的RHEL 6.2，那会RedHat还没分出Fedora和RHEL呢）。回来安装就受阻了，什么是Mount Point,完全不懂啊，当时也没有网络，只能在书店一本一本找。等终于成功装完，才发现这是个和Windows完全不同的世界，束手束脚，什么都不会做。第一次接触Linux就这样被彻底吓到了，当晚装回Windows ME，宣告迁移失败。&lt;/p&gt;

&lt;p&gt;不过实践了就有益无害，这一步真是为之后接触Linux开了个好头。&lt;/p&gt;

&lt;p&gt;高中的时候喜欢跑到邮局书店看免费杂志，从《电脑爱好者》（感谢CFAN启蒙之恩）里看到Ubuntu官网的光盘免费派送活动，尝试这申请了一个，不料真的邮寄来了。试用一下，如同进入一个广阔的新天地，Gnome+Compiz简直太炫目了。有人评论Ubuntu在Linux普及上的贡献是巨大的，确实不错。如果当时用的是Arch，估计我就又果断撤退了。&lt;/p&gt;

&lt;p&gt;初用Ubuntu，最大的不适应就是常用软件，图形界面下没几个靠谱的（其实现在也是…），Openoffice更是完全闹着玩的，根本没办法代替M$，而且家里的台式机也不是我一个人用，还要照顾父母的工作，折腾幅度必须尽量小，结果就是多次尝试迁移主系统到Ubuntu都失败了。&lt;/p&gt;

&lt;p&gt;我一直认为，想全面了解一个事物，与之朝夕相伴是最好的方法。
学习Linux，双系统永远都不能传授什么知识，只有彻底抛弃Windows才行。
这一目标终于在上大学后有了自己的电脑后实现了。&lt;/p&gt;

&lt;p&gt;经历了多少次 努力用Linux—想念Windows—迁移失败—回退 这种循环已经记不得了，总之是一个漫长的过程。人总会偏爱自己熟悉的事物，起初用Linux时，总会对其与Windows不同的设计耿耿于怀，觉得不一样就是不合理，之后越来越想念熟悉的Windows，再之后重装回去……我相信很多开源爱好者都是这么一步一步走过来的。如果小时候第一次用电脑就用Linux该多好，我相信他们也一定这么想。&lt;/p&gt;

&lt;p&gt;还有一个重要因素就是Linux的图形界面确实不够成熟，对新手还不够友好。
图形界面不好用，自然就发掘一下命令行的世界。记得一个朋友初用Ubuntu的时候抱怨过，Synaptic很好用，为什么网上的教程都用apt-get，当时我也无法解答他的问题，现在看来，这个问题恐怕很难解答，除了效率、自由度之类的原因外，其他的因素恐怕只可意会不可言传。&lt;/p&gt;

&lt;p&gt;熟悉了命令行就能更快的发现Linux的优势。除了一些商业软件找不到合适的Linux替代品外，其他几乎满满的都是优点。觉得好用—渴望多了解—越发觉得好用，良性循环恐怕就是这样建立的吧。这期间有两件事我觉得对自己影响颇大，一是Archlinux，一是《Unix编程艺术》。&lt;/p&gt;

&lt;p&gt;第一次接触Archlinux，觉得这东西太反人类了，这恐怕正式当时认识太浅薄的表现。
第二次接触则是众多次重装系统中的一次尝试，找着官网Guide一步一步安装下去，发现这个小巧的发行版这急的如此精致，而且因为需要手工解包，安装程序不再是一个神秘的黑盒，对Linux的认识被彻底刷新。我一直强烈反对计算机专业的朋友使用Windows也是这个原因，一个根本无法看清内部细节的系统，苦心钻研怎么为他编程又有什么用。&lt;/p&gt;

&lt;p&gt;一次大学的图书馆无意间借到《Unix编程艺术》。当时正在做毕业设计的程序–一个简单的UDP发包器，使用Python+wxWidget实现，之前只学习过编程语言，完全没接触过程序设计理论，更不懂解耦。也许是一直使用Linux，潜移默化的暗示下，总觉得自己的程序看起来不自然，修改程序时总有推倒重构的冲动。看了《Unix编程艺术》，理解了KISS原则，豁然开朗，之前觉得*nix的各种优势得到了系统的解释。&lt;/p&gt;

&lt;p&gt;说了很多力挺Linux的言论，但缺点也不能不说。开源是件好事，但开发者的动力从何而来呢，资金从何而来呢，无非是开发者对代码的热爱和商业公司对社区的资助。无利不起早啊，商业公司资助大型项目一定是因为项目对自身商用有利，个人桌面应用则不比商用，没有直接利益，也就少有人出资，仅凭开发者一枪热情自然只能点到为止，能用就行。&lt;/p&gt;

&lt;p&gt;我在2013年底购入了人生的第一台Mac，之前尝试过黑苹果，但是稳定性太差，根本无法实用。现在用上OSX，感觉就像是回家，这才是真正意义上的产品。这是最先进的操作系统，没有之一。&lt;/p&gt;

&lt;p&gt;杂七杂八写了不少，就此打住吧。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/linux-and-me&quot;&gt;Linux-and-me&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[hexo-config]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/hexo-config" />
  <id>http://halochou.github.io/hexo-config</id>
  <published>2014-01-08T10:10:18Z</published>
  <updated>2014-01-08T10:10:18Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;第一次搭博客，发现这还真是个挺有意思的话题。&lt;/p&gt;

&lt;h1 id=&quot;section&quot;&gt;平台选择&lt;/h1&gt;
&lt;p&gt;本人基本上患有选择困难症，之前用Linux的时候，每个月换一次发行版，这次挑选博客平台时又毫无意外的花了很长时间抉择。经过一般挖掘，大致有以下几个选项。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Wordpress &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;优点：主流博客平台，资源众多，易上手。&lt;/p&gt;

&lt;p&gt;缺点：作为老牌平台，有些臃肿，我也不计划对PHP深挖，不便未来折腾；Wordpress.com因某些原因无法访问（You Know），其他国内平台又不大想用，自己搭的话，主页空间自由度不高，VPS又太贵~&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ghost&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;主页介绍看起来很诱人，可惜没有免费服务，只能自己在本地搭个玩玩，等以后有VPS了再折腾吧。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Jekyll / Octopress&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Github Pages默认引擎，好多大神貌似都在用。试用了一下，还是挺不错的，符合高度定制化的Geek风格，。不过就是太折腾，都搭好了估计早就懒得写博文了……另外据说文章多了性能是个问题。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Hexo&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最终选定Hexo，台湾同胞的作品，难望其项背啊。看看人家的功力，再看看自己…唉……&lt;/p&gt;

&lt;p&gt;优点：Hexo是一个基于Node.js的博客框架，十分简约，默认主题很优雅，效率很好，而且可以生成静态网页后自动部署到Github上，一举两得。&lt;/p&gt;

&lt;p&gt;缺点：还是有点小众，资源略少，出了Bug Google未必知道。&lt;/p&gt;

&lt;h1 id=&quot;hexo&quot;&gt;Hexo安装&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://zespia.tw/hexo/docs/setup.html&quot;&gt;Hexo官网&lt;/a&gt;有很详细的介绍，其实只要一个命令就足够了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g hexo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后初始化自己的博客就齐了。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo init blog
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
├── _config.yml
├── package.json
├── scaffolds
├── scripts
├── source
|   ├── _drafts
|   └── _posts
└── themes
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;hexo-1&quot;&gt;Hexo优化&lt;/h1&gt;
&lt;p&gt;Hexo的初始配置很简约，而且默认的评论分享模块不符合天朝国情（此处省略一万字……），还是要自己打理一下才好。做了修改之后，可以用这个命令测试一下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认配置会在localhost:4000建立一个webserver，自行查看即可。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;主题&lt;/h2&gt;
&lt;p&gt;通过npm安装过来的hexo默认主题是landscape，不是传说中的light，原因不明（下一代？没light好看），有知道的朋友还望告诉一声。&lt;/p&gt;

&lt;p&gt;安装light，在blog根目录下执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git://github.com/tommy351/hexo-theme-light.git themes/light
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改&lt;code&gt;/_config.yml&lt;/code&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;theme: light
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-2&quot;&gt;图片文件夹&lt;/h2&gt;
&lt;p&gt;使用markdown写文章，插入图片的格式为&lt;code&gt;![图片名称](链接地址)&lt;/code&gt;，其中链接地址是个url，这里针对hexo，可以创建&lt;code&gt;/source/img&lt;/code&gt;目录，引用时用下面语句即可：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;![lable](/img/hexo-github-deploy/01.png)  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-3&quot;&gt;配置网站信息&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;/_config.yml&lt;/code&gt;文件存储了该blog的全局信息，修改其中Site字段：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;yaml&quot;&gt;    &lt;span class=&quot;c1&quot;&gt;# Site&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;ZhouYang&amp;#39;s Blog&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;subtitle&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Tech &amp;amp; Life Record&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;Zhou Yang&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;email:halo.chou@gmail.com&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;language&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;zh-CN&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# URL&lt;/span&gt;
    &lt;span class=&quot;l-Scalar-Plain&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p-Indicator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;l-Scalar-Plain&quot;&gt;http://halochou.github.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;替换评论模块&lt;/h2&gt;
&lt;p&gt;hexo默认使用国外比较流行的disqus评论模块。&lt;/p&gt;

&lt;p&gt;说实话，之前没研究过，原来评论系统也可以是一个单独的提供商。disqus支持的登录帐号包括Google+、Facebook……你懂了。&lt;/p&gt;

&lt;p&gt;国内提供类似服务的是&lt;a href=&quot;http://duoshuo.com&quot;&gt;多说&lt;/a&gt;，注册一个帐号后可以拿到针对自己的通用代码。&lt;/p&gt;

&lt;p&gt;修改&lt;code&gt;/themes/light/layout/_partial/comment.ejs&lt;/code&gt;，
删除原有的关于disqus和facebook的代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% if (page.comments){ %&amp;gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;section&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;comment&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;%= __(&amp;#39;comment&amp;#39;) %&amp;gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;&amp;lt;! Your Code &amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/section&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;% } %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-5&quot;&gt;替换分享模块&lt;/h2&gt;
&lt;p&gt;原因同上……&lt;/p&gt;

&lt;p&gt;在&lt;a href=&quot;http://share.baidu.com/code&quot;&gt;百度分享&lt;/a&gt;获取代码，并在&lt;code&gt;themes/light/layout/_partial/article.ejs&lt;/code&gt;中，将&lt;code&gt;&amp;lt;%-partial(&#39;post/share&#39;)%&amp;gt;&lt;/code&gt;替换掉即可。&lt;/p&gt;

&lt;h2 id=&quot;feed&quot;&gt;添加Feed&lt;/h2&gt;
&lt;p&gt;虽说什么都没写呢，也根本没人来看，但是折腾是无止境的╮(╯_╰)╭&lt;/p&gt;

&lt;p&gt;安装feed插件&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install hexo-generator-feed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;/_config.yml&lt;/code&gt;中，添加以下代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;plugins: 
- hexo-generator-feed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;themes/light/_config.yml&lt;/code&gt;中，修改：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rss: /atom.xml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;themes/light/layout/_partial/header.ejs&lt;/code&gt;中，&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;/ul&amp;gt;&lt;/code&gt;之间，添加代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;li&amp;gt; &amp;lt;a href=&quot;/atom.xml&quot;&amp;gt;RSS&amp;lt;/a&amp;gt; &amp;lt;/li&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果node.js正在运行，记得重启，npm安装了插件是需要重启生效的。&lt;/p&gt;

&lt;h2 id=&quot;sitemap&quot;&gt;添加sitemap模块&lt;/h2&gt;
&lt;p&gt;和添加RSS类似，执行下面命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install hexo-generator-sitemap
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;/_config.yml&lt;/code&gt;中，添加代码：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;    plugins: 
    - hexo-generator-feed
    - hexo-generator-sitemap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;访问 http://halochou.github.com/sitemap.xml 即可看到网站地图。&lt;/p&gt;

&lt;h1 id=&quot;github&quot;&gt;部署GitHub&lt;/h1&gt;
&lt;p&gt;Hexo部署到GitHub是通过先生成静态网站代码，再&lt;code&gt;git push&lt;/code&gt;到GitHub上完成的。
##建立GitHub Repo
首先新建一个Repo，名称应是username.github.com，如果不想放在这个域名的根目录里另有他法，之后再补充。&lt;/p&gt;

&lt;h2 id=&quot;hexo-2&quot;&gt;向Hexo添加部署信息&lt;/h2&gt;
&lt;p&gt;修改&lt;code&gt;/_config.yml&lt;/code&gt;：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;html&quot;&gt;    deploy:
        type: github
        repo: git@github.com:halochou/halochou.github.com.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-6&quot;&gt;生成静态站点&lt;/h2&gt;
&lt;p&gt;只需要一条命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo generate 或者

hexo g
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-7&quot;&gt;部署站点&lt;/h2&gt;
&lt;p&gt;还是只有一个命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hexo deploy 或者

hexo d
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;bug&quot;&gt;Bug&lt;/h1&gt;
&lt;p&gt;我在配置Hexo过程中，出现过&lt;code&gt;hexo s&lt;/code&gt;正常，但是&lt;code&gt;hexo g&lt;/code&gt;报错&lt;code&gt;EISDIR&lt;/code&gt;的故障，与使用&lt;code&gt;hexo new page &quot;about&quot;&lt;/code&gt;有关，new page在&lt;code&gt;/source&lt;/code&gt;内创建了一个文件夹，但hexo g无法识别，暂未找到解决办法，建议在配置Hexo过程中多generate，节省Debug时间。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/hexo-config&quot;&gt;hexo-config&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 08, 2014.&lt;/p&gt;</content>
</entry>


<entry>
  <title type="html"><![CDATA[Hello World]]></title>
  <link rel="alternate" type="text/html" href="http://halochou.github.io/hello-world" />
  <id>http://halochou.github.io/hello-world</id>
  <published>2014-01-07T19:52:34Z</published>
  <updated>2014-01-07T19:52:34Z</updated>
  <author>
    <name>Zhou Yang</name>
    <uri>http://halochou.github.io</uri>
    <email>halo.chou@gmail.com</email>
  </author>
  <content type="html">&lt;p&gt;开博的想法由来已久，在一个朋友的启发下决定付诸实践。&lt;/p&gt;

&lt;p&gt;经常光顾各种技术大牛的博客，吸收知识的同时也有各种艳羡。
我不算程序员，只是个编程爱好者，学的也不是计算机专业，但是确实无比热爱这门科学。
第一篇博文用来回忆一下自己和计算机的故事吧，没什么逻辑性，也没什么文笔，权当留个纪念。&lt;/p&gt;

&lt;p&gt;1997年的时候，父亲工作单位给家里分配了一台PC，记得品牌叫A-Star，16MB内存，800MB昆腾硬盘。现在这些牌子恐怕早就没有了吧。当时我只有8岁，现在看来，能那么早接触计算机真是幸运。如今这个产业很发达，小孩子都会玩iPad、上网，入门没有门槛，但含金量也自然下降了，何况游戏的诱惑太大，要想对计算机本身产生兴趣还真是困难。97年那会就不同了，虽然当时应该已经有了Win95，但家里的电脑还是Win32，现在看Win32不过就是DOS上的一个APP，启动了它再启动游戏可能资源就不够了，于是一切活动都在DOS里进行。cd pal、play.bat…当时根本不知道play是什么意思，看来游戏的动力真是大啊。&lt;/p&gt;

&lt;p&gt;2000年的时候，老爸从二手市场花50元淘回来一条16M内存，家里早已无比缓慢的电脑在有了32M内存后焕发了一阵青春（只是一阵而已…），用现在的话讲，当时的世界观都被刷新了，原来电脑这东西没那么金贵，才50。自此，换硬盘，换电源，刷BIOS，刷BIOS失败，换主板…一路折腾下来，家里的老爷机除了机箱，恐怕什么都更换了一遍。这一年了，我把98年整年的《电脑爱好者》翻了不知多少遍，收获也真是无比丰富，那份快乐恐怕很难再有了。（其实从《电脑爱好者》这杂志也基本能验证我之前的观点，现在这杂志已经彻底是个计算机普及读物了，相比之下，当年的内容简直太Geek了，这里也要感谢父亲为我开了个好头，是他把我带进了这个神奇的领域。）&lt;/p&gt;

&lt;p&gt;现在的接触计算机已经16年了，方方面面也玩过不少，美好的回忆真的很多，从前不写东西真心没有体会。想想确实确实应该有个地方把这些经历做个积淀，温故知新。&lt;/p&gt;

&lt;p&gt;开这个博客旨在记录生活与技术的一些感悟。现在技术尚浅，但愿能与此博一起成长，早日想些样子。
关于技术，除了开源领域需要学习的众多主题，我也计划写些工作相关的经验，都是知识，有备无患吧。&lt;/p&gt;

&lt;p&gt;希望这个博客能是一个新的开始。&lt;/p&gt;

  &lt;p&gt;&lt;a href=&quot;http://halochou.github.io/hello-world&quot;&gt;Hello World&lt;/a&gt; was originally published by Zhou Yang at &lt;a href=&quot;http://halochou.github.io&quot;&gt;Halo Zone&lt;/a&gt; on January 07, 2014.&lt;/p&gt;</content>
</entry>

</feed>